name: Django CI-CD new

on:
  workflow_dispatch

env:
  AWS_REGION: us-east-1                                                      # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: cdk-hnb659fds-container-assets-567282118302-us-east-1      # set this to your Amazon ECR repository name
  ECS_SERVICE: app-service                                                   # set this to your Amazon ECS service name
  ECS_CLUSTER: app-cluster-new                                               # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./task-definition.json                                # set this to the path to your Amazon ECS task definition
  ECS_TASK_DEFINITION_PROD: ./task-definition-prod.json                      # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: web                                                        # set this to the name of the container in the
  ECS_SERVICE_PROD: app-service-prod
  ECS_CLUSTER_PROD: app-cluster-prod
  CONTAINER_NAME_PROD: web-prod
                                               
jobs:
  test-dev:
    environment: 
      name: dev  
    name: Testing-dev
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: 3.9
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run Tests
      run: |
        export REQUIRED_SETTING="Online"
        python manage.py test
 
  build-push-deploy-to-dev:
    environment: 
      name: dev  
    needs: test-dev
    name: Build Image Dev
    runs-on: ubuntu-latest   
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: app-image
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition app_task_definition --query taskDefinition > task-definition.json
        
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

  build-push-deploy-to-prod:
    environment: 
      name: prod  
    needs: build-push-deploy-to-dev
    name: Build Image Prod
    runs-on: ubuntu-latest   
    steps:
    - name: Retag test/image:dev as test/image:staging and test/image:production
      uses: abronin/ecr-retag-action@v1
      with:
          aws-region: us-east-1
          repository: ${{ env.ECR_REPOSITORY }}
          tag: app-image
          new-tags: app-image-prod
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-east-1
  
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition app-task-definition-prod --query taskDefinition > task-definition-prod.json
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: us-east-1
        
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION_PROD }}
        service: ${{ env.ECS_SERVICE_PROD }}
        cluster: ${{ env.ECS_CLUSTER_PROD }}
        wait-for-service-stability: true
